/******************************************************************************
*
* (c) Copyright 2010 Xilinx, Inc. All rights reserved.
*
* This file contains confidential and proprietary information of Xilinx, Inc.
* and is protected under U.S. and international copyright and other
* intellectual property laws.
*
* DISCLAIMER
* This disclaimer is not a license and does not grant any rights to the
* materials distributed herewith. Except as otherwise provided in a valid
* license issued to you by Xilinx, and to the maximum extent permitted by
* applicable law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND WITH ALL
* FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS, EXPRESS,
* IMPLIED, OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF
* MERCHANTABILITY, NON-INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE;
* and (2) Xilinx shall not be liable (whether in contract or tort, including
* negligence, or under any other theory of liability) for any loss or damage
* of any kind or nature related to, arising under or in connection with these
* materials, including for any direct, or any indirect, special, incidental,
* or consequential loss or damage (including loss of data, profits, goodwill,
* or any type of loss or damage suffered as a result of any action brought by
* a third party) even if such damage or loss was reasonably foreseeable or
* Xilinx had been advised of the possibility of the same.
*
* CRITICAL APPLICATIONS
* Xilinx products are not designed or intended to be fail-safe, or for use in
* any application requiring fail-safe performance, such as life-support or
* safety devices or systems, Class III medical devices, nuclear facilities,
* applications related to the deployment of airbags, or any other applications
* that could lead to death, personal injury, or severe property or
* environmental damage (individually and collectively, "Critical
* Applications"). Customer assumes the sole risk and liability of any use of
* Xilinx products in Critical Applications, subject only to applicable laws
* and regulations governing limitations on product liability.
*
* THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS PART OF THIS FILE
* AT ALL TIMES.
*
******************************************************************************/
//----------------------------------------------------------------------------------------------------//
//! @file config_init.h 
//! This contains the values for system definition. This can be  generated by 
//! libgen and can also be modified by the user for customization.
//! - The structures are declared in sys/init.h
//! - If any changes are made to this file by the user, then they also need
//!   to change the corresponding fields in config_cparam.h file. 
//----------------------------------------------------------------------------------------------------//
#include <sys/init.h>
#include <os_config.h>


//----------------------------------------------------------------------------------------------------//
//! se_process_table contains the information about separate executable processes that 
//! need to be created during system init. This information is used by se_process_init().
//----------------------------------------------------------------------------------------------------//
struct _process_init se_process_table[] = {
   {0x0, 0 } 
} ;

#ifdef CONFIG_SHM
//----------------------------------------------------------------------------------------------------//
//! shm_config - User defined information about Shared Mem's are defined
//! here. It contains information about each shard mem in the system. This
//! is used by shm_init().
//----------------------------------------------------------------------------------------------------//
struct _shm_init shm_config[] = {
  { 100 },
} ;
#endif

#ifdef CONFIG_MALLOC
//----------------------------------------------------------------------------------------------------//
//! malloc_config - User defined information about dynamic memory blocks are 
//! defined here. This is used by malloc_init() to initialize the structures.
//----------------------------------------------------------------------------------------------------//
const struct _malloc_init malloc_config[] = {
  { 4, 10 },
  { 8, 10 },
} ;
#endif
